# Define some default values that can be overridden by system properties
my.root.level=DEBUG
my.http.level=INFO
my.cascading.level=INFO

my.root.logger=${my.root.level},console
my.console.pattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}:%L - %m%n

# Define the root logger to the system property "my.root.logger".
log4j.rootLogger=${my.root.logger}

# Logging Threshold
log4j.threshhold=ALL

#
# console
# Add "console" to my.root.logger above if you want to use this 
#
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=${my.console.pattern}

# Custom Logging levels

# Allow hiding of wire output even when running at TRACE levels
log4j.logger.org.apache.http.wire=${my.http.level}
log4j.logger.org.apache.http.headers=${my.http.level}
log4j.logger.org.apache.http=${my.http.level}

# Hide a bunch of useless output that we get at the DEBUG level. These should
# probably all be using trace(), not debug() to log their output.
log4j.logger.cascading.flow.stack.FlowMapperStack=${my.cascading.level}
log4j.logger.cascading.pipe.Each=${my.cascading.level}
log4j.logger.cascading.pipe.Group=${my.cascading.level}
log4j.logger.cascading.pipe.joiner=${my.cascading.level}

log4j.logger.org.apache.hadoop=WARN
log4j.logger.org.apache.hadoop.conf.Configuration=INFO
log4j.logger.org.apache.hadoop.mapred.JobClient=ERROR

log4j.logger.org.apache.http.impl.conn.tsccm.RefQueueWorker=INFO

# Temp change to track down connection pool problems
# log4j.logger.org.apache.http.impl.conn.tsccm.ConnPoolByRoute=DEBUG

# This is actually logging done inside of DefaultRedirectHandler.getLocationURI,
# which is called by SimpleHttpFetcher$MyRedirectHandler
log4j.logger.bixo.fetcher.http.SimpleHttpFetcher$MyRedirectHandler=INFO
log4j.logger.org.mortbay.util.ThreadedServer=INFO

# Hide some useless warnings
log4j.logger.org.apache.http.client.protocol.ResponseProcessCookies=ERROR
